# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages: # List of stages for jobs, and their order of execution
- build
#- test
#- deploy


build-firmware:
  image:
    #    name: "zmkfirmware/zmk-build-arm:3.2"
    name: "$CI_REGISTRY_IMAGE/zmk-build"
    pull_policy: if-not-present
  stage: build
  parallel:
    matrix:
    - VARIANT:
      - sofle_view
      - lily58
  script:
  - echo "Compiling the code..."
  - cd /zmk/
  - cd app
  - |
    for b in $(yaml2json ${CI_PROJECT_DIR}/boards/${VARIANT}/build.yaml | jq -r '.include[] | @base64')
    do
      BOARD=$(echo $b | base64 -d - | jq -r '.board')
      SHIELDS=$(echo $b | base64 -d - | jq -r '.shield')
      SHIELD=$(echo ${SHIELDS} | cut -d' ' -f1)
      OUTPUT=$VARIANT
      if [ ! -z $(echo $SHIELD | grep -iE '_(left|right)$') ]
      then
          OUTPUT="${VARIANT}_$(echo ${SHIELD} | rev | cut -d_ -f1 | rev)"
      fi
      west build -d .build/${SHIELD} -b ${BOARD} -- -DSHIELD="${SHIELDS}" -DZMK_CONFIG=${CI_PROJECT_DIR}/boards/${VARIANT}
      cp -r .build/${SHIELD}/zephyr/zmk.uf2 ${CI_PROJECT_DIR}/${OUTPUT}.uf2
    done
  - echo "Compile complete."
  artifacts:
    untracked: true
    paths:
    - "*.uf2"
    when: on_success
    expire_in: 30 days

build-docker-image:
  variables:
    ZMK_REPO: "https://github.com/xmz/zmk.git"
    ZMK_BRANCH: "my-features"
    ZMK_IMAGE_VERSION: "3.2"
    DOCKER_TLS_CERTDIR: "/certs"
  image:
    name: docker:stable-git
    pull_policy: if-not-present
  services:
    - docker:dind
  stage: build
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
  - docker build --tag $CI_REGISTRY_IMAGE/zmk-build -f docker_build_image/Dockerfile --build-arg="ZMK_IMAGE_VERSION=${ZMK_IMAGE_VERSION}" --build-arg="ZMK_REPO=${ZMK_REPO}" --build-arg="ZMK_BRANCH=${ZMK_BRANCH}" .
  - docker push $CI_REGISTRY_IMAGE/zmk-build
  # only:
  #   - master
  when: manual

